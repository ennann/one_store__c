const { newLarkClient, batchOperation } = require('../utils');

/**
 * @param {Params}  params     Custom parameters
 * @param {Context} context    Context parameters
 * @param {Logger}  logger     Logger for event recording
 *
 * @return The resulting data from the function
 */
module.exports = async function (params, context, logger) {
    logger.info('开始执行群置顶分发函数', { timestamp: new Date(), user: context.user._id });
    logger.info(params);

    const { chat_bot } = params;
    if (!chat_bot || !chat_bot._id) {
        logger.error('错误：缺少群置顶信息');
        return { code: -1, message: '错误：缺少群置顶信息' };
    }

    // 获取群置顶的群聊ID
    const chat_record_list = await faas.function('DeployChatRange').invoke({ deploy_rule: chat_bot.chat_rule });
    const chat_id_list = chat_record_list.map(item => item.chat_id);
    logger.info('根据规则获取到的群ID列表为', chat_id_list);

    if (!chat_id_list || chat_id_list.length === 0) {
        logger.error('查询结果为空，未找到对应的群聊');
        return { code: -2, message: '未找到对应的群聊，无法分发' };
    }

    // 清理 pin_url 中的换行和空格
    let { pin_name, pin_url, pin_icon } = chat_bot;
    pin_url = pin_url.replace(/[\n\s]/g, '');
    logger.info('处理后的置顶URL：', pin_url);

    let client = await newLarkClient({ userId: context.user._id }, logger);
    let image_key = null;

    let success_count = 0;
    let failed_count = 0;
    let batch_create_data = [];
    let fail_chat_list = [];

    for (let chat_id of chat_id_list) {
        let loop_logs = `开始处理群聊 ${chat_id}: `;

        try {
            // 处理图标上传
            if (pin_icon && pin_icon.length > 0 && pin_icon[0]) {
                let file = await context.resources.file.download(pin_icon[0]);
                let image_key_res = await client.im.image.create({
                    data: {
                        image_type: 'message',
                        image: file,
                    },
                });

                if (image_key_res.code !== 0) {
                    throw new Error('图片上传失败: ' + image_key_res.message);
                }
                image_key = image_key_res.image_key;
            }

            let group_tab_res = await await client.im.chatTab.create({
                path: {
                    chat_id: chat_id,
                },
                data: {
                    chat_tabs: [
                        {
                            tab_name: pin_name,
                            tab_type: 'url',
                            tab_content: {
                                url: pin_url,
                            },
                            tab_config: {
                                icon_key: image_key,
                                is_built_in: true,
                            },
                        },
                    ],
                },
            });

            if (group_tab_res.code !== 0) {
                throw new Error('群置顶更新失败: ' + group_tab_res.message);
            }

            loop_logs += '群置顶更新成功';
            success_count++;
            batch_create_data.push({
                chat_bot: { _id: chat_bot._id },
                chat: { _id: chat_record_list.find(item => item.chat_id === chat_id)._id },
            });
        } catch (error) {
            loop_logs += '群置顶更新失败，原因：' + error.message;
            failed_count++;
            fail_chat_list.push({
                chat_id: chat_id,
                reason: error.message || '未知错误',
            });
        }

        // Log the result of each iteration in a consolidated manner
        logger.info(loop_logs);
    }

    logger.info('群置顶分发完成，批量创建数据数量为 batch_create_data ', batch_create_data.length);
    logger.info(JSON.stringify(batch_create_data, null, 2));
    logger.info(`成功数量 ${success_count}，失败数量 ${failed_count}，失败群聊列表 ${JSON.stringify(fail_chat_list, null, 2)}`);

    // 开始批量创建数据
    if (batch_create_data.length > 0) {
        await batchOperation(logger, 'object_chat_pin_relation', 'batchCreate', batch_create_data);
        logger.info('批量创建群置顶关系数据完成');
    }

    return {
        code: success_count > 0 ? 0 : -1,
        message: '群置顶分发完成',
        data: {
            success_count,
            failed_count,
            fail_chat_list,
        },
    };
};
